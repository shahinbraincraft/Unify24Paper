apply plugin: 'com.android.application'
def extraLibPath = meisheSdkExtraPath(rootDir)
android {
    compileSdkVersion 28

    defaultConfig {
        applicationId "com.meishe.fxplugin"
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                cppFlags ""
                arguments "-DANDROID_STL=c++_static"
            }
        }
        ndk {
//            abiFilters 'arm64-v8a'
            abiFilters 'armeabi-v7a'
//        abiFilters 'armeabi-v7a', "arm64-v8a"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
            version "3.10.2"
        }
    }
    task libCopy(type: Copy) {
        copy {
            from extraLibPath + 'lib/android_armv7'
            into 'src/main/jniLibs/armeabi-v7a'
            include '*.so'
        }
    }

}


dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation fileTree(include: ['*.jar'], dir: extraLibPath + 'lib/android_jar')
    implementation 'com.android.support:design:28.0.0'
    implementation 'com.android.support:appcompat-v7:28.0.0'
    testImplementation 'junit:junit:4.12'
    implementation 'com.android.support:recyclerview-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation 'com.github.bumptech.glide:glide:4.1.1'
}

def meisheSdkExtraPath(File rootDir) {
    String defaultPath = "../../../../"
    try {
        File confFile = new File(rootDir.getAbsolutePath() + "/../../../meishesdk_libpath.conf")
        if (!confFile.exists()) {
            if (confFile.createNewFile()) {
                FileOutputStream outputStream = new FileOutputStream(confFile)
                outputStream.write(defaultPath.getBytes())
                outputStream.close()
                return defaultPath
            }
        }
        BufferedReader br = new BufferedReader(new FileReader(confFile))
        String readline = ""
        StringBuffer sb = new StringBuffer()
        while ((readline = br.readLine()) != null) {
            sb.append(readline)
        }
        br.close()
        String pathTmp = sb.toString()
        pathTmp = pathTmp.replace("\\", "/")
        if (!pathTmp.endsWith("/")) {
            pathTmp += "/"
        }
        if (pathTmp == null || pathTmp.isEmpty()) {
            pathTmp = defaultPath
        }
        print("sdk path:" + pathTmp)
        return pathTmp
    } catch (Exception e) {
        e.printStackTrace()
    }
    return defaultPath
}
